解释器	python、python3
	底层是:cpython
			ipython
			pypy
			jypython
交互式	ipython
集成开发环境 Pycharm
源程序：文本文件 （任意文本编辑器做开发）
	以.py结尾

python是一门面向对象语言：
/**
	1、第一行 #!/usr/bin/python 的解释
		脚本语言的第一行，只对 Linux/unix 用户适用，用来指定本脚本用什么解释器来执行。
		#!/usr/bin/env Python 会去环境设置寻找 Python 目录，可以增强代码的可移植性，推荐这种写法
	2、第二行 # -*- Coding:utf-8 -*-
		指定此文件使用何种编码格式解析文件
		编码格式注释符合正则即可：^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-za-z0-9]+)
			# Encoding=utf-8
			编码格式：
				ascii	   : 数字+字符  65a 97a    256
				gb2312、gbk : 汉字
				unicode(utf-8 -16 -32) 【1-4个字节（8-32位）】
				iso
**/
有这句的，加上执行权限后，可以直接用 ./ 执行，不然会出错，因为找不到 Python 解释器。

1、安装多个python版本
2、把pycharm的功能摸全一点
1、import 导入模块名
	然后通过模块名去调用模块里面封装的方法（函数）
	模块名.方法名
2、import 导入的模块名 from 方法(函数)
	这样可以直接使用这个单个方法
	方法名
3、from 导入的模块名 import *
	将模块里面封装的所有的方法都可以进行使用

PyCharm问题
	1、选择python解释器        ：file - Settings - projiect - python interpreter
		选择字体什么
	2、 控制台模式的解除 ： run - Edit configurations - run with Python Console
	3、 快捷键模式选择   ： file - Settings - keymap   (可以搜快捷键)
	4、 文字颜色样式的选择   ： file - Settings - font
	5、 想打开什么窗口   ： tool - console...

	5、快捷键
		 执行: alt + shift + F10

		 python PEP规范******************************
python2.0   python2.6过度版本  python2.7最后一个版本
python3.0
安装的话  就官网下载安装包   安装  然后添加环境变量  如果安装了多个版本  可以选择切换（进入目录等）
一、python2.0 和 Python3.0的区别
	windows切换： [py -2]   Vs  [py -3]
	linux切换  ： Python2  Python3
	中文乱码的话 1、确定使用编辑器的文件编码格式是什么
				2、然后python2 3 可以指定字符集  U

	1.1：代码细分的差异
		比如输出[print '123']  Vs  [print('123')]
		比如输入[print '123']  Vs  [print('123')]
			2.0 					  3.0
			源码不规范，重复代码多      源码精简 美观优雅
			整形int 长整形long		  整形int
			打开文件 File() Open()	  只能open()
			输出从语句变成函数		   函数


波浪
黄警告
红错误

二、常见报错
	1、缩进错误
	2、关键字错误
	3、查找子串不存在报错 ：index()： ValueError: substring not found
	4、两个字典不能用+号进行合并： unsupported operand type(s) for +: 'dict' and 'dict'
del： 清除一些对象

三、基本语法
	3.1、单引号  双引号   三引号  反引号（特殊字符）
		使用时： 当需引入单引号  用双引号包裹  三引号
				 三引号：会保留格式去输出
		引入：将字符转换成字符串两种方法
			str()
			repr()     : 给字符外围带上引号
			区别 比如print(str('abc'))  VS print(repr('abc'))
		注释： #  三引号
	3.2、输入、输出
		print：控制台输出内容
	3.3、变量类型
			见名知意
			  1、数字+字母+下划线
			  2、驼峰命名规则		小驼峰(首字母小写)  大驼峰(每个单词首字母大写)  建议下划线分割
			  3、不能数字开头
			  4、不能使用关键字
			  5、严格区分大小写
		变量存储在内存中 ，会给变量开辟存储空间
		单个变量赋值
			a = 1
		多个变量赋值
			a = b = c = 1  				：多个变量指向同一内存空间上
			a = b = c = 1 , 'a' , 'b'   ：多个变量指向不同内存空间上
	3.4、数据类型
		numbers(数字)
			int    *
			long
			float  *
			complex
			boolean * 布尔类型
		String(字符串)
			① tempStr[起始:结束:步长]
			② tempStr   + 是列表连接运算符，星号 * 是重复操作
		list(列表)：		特点-有序的
			[元素1，元素2]
		tuple(元组)：	特点-不允许更新
			(元素1，元素2)
		directory(字典) 特点-无序的
			｛key:value, key2:value2｝


	3.5、运算符
		算数运算符：+ - * / % // ++ -- “//”整除 "**"幂
		赋值运算符： =
		复合运算符：+= -+
		逻辑运算符： and(与 并且)  or(或)      not(非)      :与或非
		 			同真异假		  有真则真
		比较运算符：>, <, >=, <=, !=，is

		 8 4 2 1
1、bin(整数)  	 二进制   整数转二进制  0b     11
2、oct(整数)      八进制	 			  0O     1111 1111
3、oct(整数)      十六进制	 		  0X     1111 1111 1111 1111
4、abs绝对值

0o23546
0x2766
0xac3   : 0X 1010 1100 0011
0o23546 : 011 101 100 110

0b10011101100110   0b10 0111 0110 0110    0X2766
0b10011101100110   0b10 011 101 100 110   0O23546


1个字节8个比特： 1byte = 8bit
位运算
	或  ：5|9  :一真则真
		 101
		1001
	----------
		1101  = 8+4+0+1=13

	与  ：5&9  :二真才真
		 101
		1001
	----------
		0001

	异或： ^   ：同真异假
	     5|9
		 101
		1001
	----------
		1100

	取反： ~9  ： 二进制取反
		1001   ：
	----------
		0110  ：

		-- 二进制的负数表示 （二进制最高位为1则是负数  0则是正数）
		9  7
		原码： 0000 0111
		补码：
		反码： 1111 1000
		补码：
	左移： 9<<2  ： 左右移动的位数  << >>    【左移乘2 10*2    [10<<3 10* 2**2]】  【右移除乘2 10*2    [10<<3 10* 2**2]】
		1001   ：
	----------
	10  0100 ：32+4=9* 2**2=9*4=36

	9>>2    0010：2=9/4 = 2于1 = 2
运算符的优先级： 括号()

######################################
input
print
random [import random    import random from 方法名   from 模块名  import *]
######################################
条件语句
if ..else
if ..elif ... else

if 条件:
	pass
elif 条件：
	pss
else pass
三目运算符：*****三目运算中表达式只能作为左值*****
	表达式 if 条件 else 表达式
######################################
# 死循环
while 结束条件：
	pass


while 结束条件：
	pass
else:
	pass

#####################################	1、能确定循环次数的时候用for 2、
for i in range(n):
	pass
for i in 序列:
	pass

# 注意  break跳出整个循环，continue跳出本次循环
for i in 序列:
	pass
else:
	pass
#####################################
切片：
	字符串的切片
字符串保留区：（常量池）
	新定义一个字符串   会先开辟一个空间  然后把字符串放进去  再指向这个地址
	垃圾回收机制：看是否有指针指向这快地址  如果没有，就会进行回收
#####################################
字符串：
str[start:ent:step]
	1.1、索引命名机制
		顺：[0起始  长度减一]
		反：[-长度	-1]
	1.2、step（步长表示长度和方向 数字表示长度 正负代表方向）
		正数：正向输出
		负数：反转输出

字符串常见操作
	1、获取长度			：len()
	2、查找内容			：find() --- find(self, sub, start=None, end=None) -> int
						 index() rfind() rindex()
	3、判断				：islower(是否全小写) isupper(是否全大写) isdigit  isalpha() isalnum()   istilte()
			startswith(判定前缀)    endswith(判定后缀)   -- 【判断文件名】和【文件格式】
	4、计算出现次数		： count
	5、替换内容			:  replace(旧,新，替换次数)  -- 次数不填默认所有
	6、切割字符串			:  split('分隔符'，切割次数) rsplit('分隔符'，切割次数)  分隔符默认为空格 切割次数为最大
	7、修改大小写			:  lower()  upper()
	8、空格处理			:  strip() lstrip() ,rstrip() ,cent(字符居中)  ljust(左)  rjust(右)
	9、字符串拼接			:
index与find区别   ： 如果找不到会报错
	10、字符串格式化   format()
		%占位  “今年是%d” % (year)   “今年是%(year)d )” % (year)
		format()
			1、省略字段名   “今年是{}”.format(year)
			2、数字命名字段 “今年是{0} 明年的前一年也是｛1｝”.format(year)  从0开始计数
			2、变量字段名   “今年是{year} 明年的前一年也是%｛year｝”.format(year=2021)  关键字参数

print("%s今年 英语%d分 数学%d分 鱼粉%d分" % (my_name, math_score, math_score, chinese_score))
print("%(my_name)s今年 英语%(math_score)s分 数学%(math_score)s分 鱼粉%(chinese_score)s分" % {"my_name": my_name,
                                                                                  "math_score": math_score,
                                                                                  "chinese_score": chinese_score})
print("{}今年 英语{}分 数学{}分 鱼粉{}分".format(my_name, math_score, math_score, chinese_score))
print("{0}今年 英语{1}分 数学{1}分 鱼粉{2}分".format(my_name, math_score, chinese_score))
print("{my_name}今年 英语{math_score}分 数学{math_score}分 鱼粉{chinese_score}分".format(my_name='ccc', math_score=99,
                                                                              chinese_score=88))
##################################### --11--
列表：list <class 'List'>
	a = []
	b = [1,3,23,1] # 但是要同一类型
	一组容器
	增：
		append()：一个字符一个字符新增
		+		：列表的拼接
		extend()：列表的拼接

	删：
	改：
	查：

######################################
元组：tuple(a,b,c) 不可变
	len()
	index()
	count()
	强制转换 列表和元组之间（）
######################################
字典:dict{key:value}

	get(key): 返回字典中key值对应的value值迭代器
	keys()	:字典中所有的key值
	values(): 把字典中所有的value值 已列表的形式返回
	items(): 把字典中所有的value值 已列表的形式返回
	for value in dict.values():
		print(value)
	for key in dict.keys():
		print(key)
	for key,value in dict.items:
		print(key,value)
	增加：
		setdefault(key,value) : 设置默认值【只能做添加键值对使用】 和get(key)类似 返回对应的value值  如果不存在增添加键值以及对应的默认value值
		update(字典B)			  ： 会把字典B中的键值对加入到这个字典中去  如果键存在 则更新value值 如果键不存在 增新增键和value值 【将一个 字典和另一个字典合并】
		formkeys()：构建一个新的字典，可以设置统一的默认值

######################################
集合：set{a,b,c} 没有重复值，无序（字典封装的）无下标
	当｛｝不是key：value的时候就是集合类型
	列表强转成集合  就可以直接去重了
	空的集合只能  set()

	增：  add()
	删：update()
    改：
    查：

######################################
函数: 封装内容，供重复使用
定义  def 函数名():

函数名：多个单词下划线（小写）
  method

apecial variables： 默认加载的变量 专用变量
调用函数：才会开始执行函数中的代码

参数：作用【】
	1、无参数 ：括号里面不需要传入参数
	2、有参数	 ：函数需要传入参数使用
		默认值参数：在定义函数的时候，有一个或者多个参数已经给与默认值
			需要放在不是默认值的参数后面
		1、有一个参数
		2、有多个参数
			参数会有拆包与装包一说
			*args
			**kwargs
		关键字参数
		默认值参数

调用函数时，往函数里面传值
函数定义时候的参数是：形式参数
调用函数时传入的参数是：实参


返回值：函数中的内容往外界传送
	注意：只要函数有返回值，则需要用变量去接收
	返回值可以有多个

系统方法：isinstance(a, int)  （变量，类型） 返回：布尔类型
######################################
全局和局部变量
	针对函数来说的

函数优先找局部变量  没有 引用全局变量
	申明在函数内部的是局部变量  ，函数内部可以用全局变量 但是不能修改【改全局变量 必须带global】
	声明在函数外边的是全局变量


######################################
函数注释
	def test():
	1、""
	2、  '''
		'''
######################################
引用
	sys.getrefcount(空间)：空间出现几次
	1、不是在函数中使用的时候，我们可以通过sys.getrefcount(变量名) 	来查看有多少个指向这个地址：查看引用次数
	del :删除了一个引用
	2、 函数的引用
		传递的值是可变类型还是不可变类型
			如果是可变：里面发生改变，外面能看到改变的结果
			如果是不可变：里面发生改变  外面不能看到
可变类型

不可变类型：数字 字符  元组 （地址不会变）
可变类型：列表 字典 集合
######################################
闭包：1、嵌套函数 2、内部函数使用了外部原生的变量  3、返回值是内部函数
	   没有多大含义  主要用在装饰器：

函数的嵌套使用 + 会产生闭包的问题
	locals() ： 查看函数中的局部变量，以字典的形式返回 {key:value}

内部函数不能修改外部函数的变量 ，如果需要修改 那么必须使用关键字 nonlocal
内层，外层，全局，系统builtins
def outer(n):
    a = 10

    def inner():
        b = a + n
        print("内部函数:", b)

    return inner


r = outer(4)
print(r)
print(r)
print(r)
r()
######################################.
装饰器
def zhuangxiu(func):
	def start_zhuangxiu():
		func()
		print("装修完毕")
	return start_zhuangxiu

@zhuangxiu
def house():
	print("空房子")
######################################.
递归:
	文件读写操作  递归文件  遍历文件
######################################.
return 返回一个或者多个值 （元组） ----> 拆包
	  ：单独使用   在函数内部，结束函数的调用

######################################
"""
匿名函数：小型 功能很简单 省略def等关键字
    *****如果一个函数有一个返回值，硬切只有一句代码，可以使用lambda简化*****
    定义格式：lambda 参数列表:运算表达式
    使用场合：作为参数的时候（系统高阶函数）
        高阶函数：函数也是一种数据类型  function类型
                一个函数可以接收另一个函数作为参数
        filter()
			# filter 返回值必须是布尔类型
        map():
        	获取

        reduce()

        zip()
"""

######################################
路径前面加r  'r'是防止字符转义的

open(文件名，mode) 返回一个流对象(生成一个管道)
	流对象可以调用方法：
		1、mode=r模式：表示的是写操作                rb
		***read()：读取全部数据
		read_line()：读取一行
		read_lines()：读取多行
		readable():判断是否可读
close() 关闭流对象，流对象没释放就可以一直读一直写    wb
		2、mode=W模式：表示的是写操作 write
			***write(内容)  :写内容的时候，每次都会清楚之前的内容，然后写当前的内容
			# 字符
			writelines(iterable) :可迭代对象，不可换行 ，如果想换行 需要带上\n
		3、mode=a模式：表示追加内容 append


		with与open结合使用，可以帮助我们自动释放资源
		with open() as 流对象：
			流对象的操作


---OS模块  文件操作的方式

















######################################
类名 ：才会去首字母大写
全局变量没有使用global声明会报错： UnboundLocalError: local variable 'a' referenced before assignment

live templates








































L






























































心得：写代码要注意简化代码  不要有重复的逻辑
文件找不到异常：FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\v_gyicheng\\Desktop\\cgy0928\\aa.txt'